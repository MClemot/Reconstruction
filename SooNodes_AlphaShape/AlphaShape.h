// generated by Fast Light User Interface Designer (fluid) version 1.0306

#ifndef AlphaShape_h
#define AlphaShape_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_File_Chooser.H>
#include <Misc.h>
#include <FL/Fl_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Output.H>
#include <GLViewer.h>

class UserInterface {
public:
  UserInterface();
  Fl_Double_Window *window;
private:
  inline void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
public:
  Fl_Menu_Bar *menubar;
  static Fl_Menu_Item menu_menubar[];
  static Fl_Menu_Item *file;
private:
  inline void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  inline void cb_Load1_i(Fl_Menu_*, void*);
  static void cb_Load1(Fl_Menu_*, void*);
  inline void cb_Random_i(Fl_Menu_*, void*);
  static void cb_Random(Fl_Menu_*, void*);
  inline void cb_SooNodes_i(Fl_Menu_*, void*);
  static void cb_SooNodes(Fl_Menu_*, void*);
  inline void cb_Camera_i(Fl_Menu_*, void*);
  static void cb_Camera(Fl_Menu_*, void*);
  inline void cb_Range_i(Fl_Menu_*, void*);
  static void cb_Range(Fl_Menu_*, void*);
  inline void cb_Object_i(Fl_Menu_*, void*);
  static void cb_Object(Fl_Menu_*, void*);
  inline void cb_Image_i(Fl_Menu_*, void*);
  static void cb_Image(Fl_Menu_*, void*);
  inline void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
public:
  Fl_Button *home;
private:
  inline void cb_home_i(Fl_Button*, void*);
  static void cb_home(Fl_Button*, void*);
public:
  Fl_Button *display_axes;
private:
  inline void cb_display_axes_i(Fl_Button*, void*);
  static void cb_display_axes(Fl_Button*, void*);
public:
  Fl_Button *display_vertices;
private:
  inline void cb_display_vertices_i(Fl_Button*, void*);
  static void cb_display_vertices(Fl_Button*, void*);
public:
  Fl_Button *display_vertices_embellished;
private:
  inline void cb_display_vertices_embellished_i(Fl_Button*, void*);
  static void cb_display_vertices_embellished(Fl_Button*, void*);
public:
  Fl_Button *zoom_plus;
private:
  inline void cb_zoom_plus_i(Fl_Button*, void*);
  static void cb_zoom_plus(Fl_Button*, void*);
public:
  Fl_Button *zoom_moins;
private:
  inline void cb_zoom_moins_i(Fl_Button*, void*);
  static void cb_zoom_moins(Fl_Button*, void*);
public:
  Fl_Button *zoom_to_fit;
private:
  inline void cb_zoom_to_fit_i(Fl_Button*, void*);
  static void cb_zoom_to_fit(Fl_Button*, void*);
  inline void cb_X_i(Fl_Button*, void*);
  static void cb_X(Fl_Button*, void*);
  inline void cb_X1_i(Fl_Button*, void*);
  static void cb_X1(Fl_Button*, void*);
  inline void cb_Y_i(Fl_Button*, void*);
  static void cb_Y(Fl_Button*, void*);
  inline void cb_Y1_i(Fl_Button*, void*);
  static void cb_Y1(Fl_Button*, void*);
  inline void cb_Z_i(Fl_Button*, void*);
  static void cb_Z(Fl_Button*, void*);
  inline void cb_Z1_i(Fl_Button*, void*);
  static void cb_Z1(Fl_Button*, void*);
public:
  Fl_Value_Input *param_size_points_vertices;
private:
  inline void cb_param_size_points_vertices_i(Fl_Value_Input*, void*);
  static void cb_param_size_points_vertices(Fl_Value_Input*, void*);
public:
  Fl_Button *display_selected_vertex;
private:
  inline void cb_display_selected_vertex_i(Fl_Button*, void*);
  static void cb_display_selected_vertex(Fl_Button*, void*);
public:
  Fl_Value_Input *param_size_spheres;
private:
  inline void cb_param_size_spheres_i(Fl_Value_Input*, void*);
  static void cb_param_size_spheres(Fl_Value_Input*, void*);
public:
  Fl_Button *display_triangles;
private:
  inline void cb_display_triangles_i(Fl_Button*, void*);
  static void cb_display_triangles(Fl_Button*, void*);
public:
  Fl_Value_Input *coef_transparency;
private:
  inline void cb_coef_transparency_i(Fl_Value_Input*, void*);
  static void cb_coef_transparency(Fl_Value_Input*, void*);
public:
  Fl_Button *transparent;
private:
  inline void cb_transparent_i(Fl_Button*, void*);
  static void cb_transparent(Fl_Button*, void*);
public:
  Fl_Button *MATERIAL_FILLED_AND_OUTLINES;
private:
  inline void cb_MATERIAL_FILLED_AND_OUTLINES_i(Fl_Button*, void*);
  static void cb_MATERIAL_FILLED_AND_OUTLINES(Fl_Button*, void*);
public:
  Fl_Button *MATERIAL_OUTLINES;
private:
  inline void cb_MATERIAL_OUTLINES_i(Fl_Button*, void*);
  static void cb_MATERIAL_OUTLINES(Fl_Button*, void*);
public:
  Fl_Button *MATERIAL_FILLED;
private:
  inline void cb_MATERIAL_FILLED_i(Fl_Button*, void*);
  static void cb_MATERIAL_FILLED(Fl_Button*, void*);
public:
  Fl_Button *MATERIAL_FILLED_AND_LINES;
private:
  inline void cb_MATERIAL_FILLED_AND_LINES_i(Fl_Button*, void*);
  static void cb_MATERIAL_FILLED_AND_LINES(Fl_Button*, void*);
public:
  Fl_Button *MATERIAL_LINES;
private:
  inline void cb_MATERIAL_LINES_i(Fl_Button*, void*);
  static void cb_MATERIAL_LINES(Fl_Button*, void*);
public:
  Fl_Slider *slider_alpha;
private:
  inline void cb_slider_alpha_i(Fl_Slider*, void*);
  static void cb_slider_alpha(Fl_Slider*, void*);
public:
  Fl_Slider *slider_simplices;
private:
  inline void cb_slider_simplices_i(Fl_Slider*, void*);
  static void cb_slider_simplices(Fl_Slider*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
public:
  Fl_Value_Output *label_vertices;
  Fl_Value_Output *label_edges;
  Fl_Value_Output *label_triangles;
  Fl_Value_Output *label_tetrahedra;
  Fl_Value_Output *label_alpha;
  Fl_Value_Input *param_width_edges;
private:
  inline void cb_param_width_edges_i(Fl_Value_Input*, void*);
  static void cb_param_width_edges(Fl_Value_Input*, void*);
  inline void cb_2_i(Fl_Button*, void*);
  static void cb_2(Fl_Button*, void*);
public:
  Fl_Value_Input *param_width_voronoi;
private:
  inline void cb_param_width_voronoi_i(Fl_Value_Input*, void*);
  static void cb_param_width_voronoi(Fl_Value_Input*, void*);
public:
  Fl_Button *button_weighted;
private:
  inline void cb_button_weighted_i(Fl_Button*, void*);
  static void cb_button_weighted(Fl_Button*, void*);
public:
  Fl_Value_Input *label_simplices;
private:
  inline void cb_label_simplices_i(Fl_Value_Input*, void*);
  static void cb_label_simplices(Fl_Value_Input*, void*);
  inline void cb_Collapse_i(Fl_Button*, void*);
  static void cb_Collapse(Fl_Button*, void*);
  inline void cb_Weighted_i(Fl_Value_Input*, void*);
  static void cb_Weighted(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *param_threshold_lfs;
private:
  inline void cb_param_threshold_lfs_i(Fl_Value_Input*, void*);
  static void cb_param_threshold_lfs(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *param_k_neighbors;
private:
  inline void cb_param_k_neighbors_i(Fl_Value_Input*, void*);
  static void cb_param_k_neighbors(Fl_Value_Input*, void*);
  inline void cb_Alpha_i(Fl_Button*, void*);
  static void cb_Alpha(Fl_Button*, void*);
  inline void cb_LFS_i(Fl_Button*, void*);
  static void cb_LFS(Fl_Button*, void*);
  inline void cb_k_i(Fl_Button*, void*);
  static void cb_k(Fl_Button*, void*);
  inline void cb_w_i(Fl_Button*, void*);
  static void cb_w(Fl_Button*, void*);
  inline void cb_Betti_i(Fl_Check_Button*, void*);
  static void cb_Betti(Fl_Check_Button*, void*);
public:
  Fl_Output *label_betti;
private:
  inline void cb_Collapse1_i(Fl_Button*, void*);
  static void cb_Collapse1(Fl_Button*, void*);
  inline void cb_Collapse2_i(Fl_Button*, void*);
  static void cb_Collapse2(Fl_Button*, void*);
  inline void cb_Betti1_i(Fl_Check_Button*, void*);
  static void cb_Betti1(Fl_Check_Button*, void*);
public:
  Fl_Double_Window *window_viewer;
  GLViewer *viewer;
  void show();
};
#endif
