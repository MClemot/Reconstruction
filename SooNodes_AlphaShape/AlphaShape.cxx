// generated by Fast Light User Interface Designer (fluid) version 1.0306

#include "AlphaShape.h"
#include "AlphaShape-Scene.h"
using namespace std;
GLuint SooNode::key_max = 0; 
MapPtrSooNode SooNode::map; 
static Scene * scene; 

int main(int argc, char **argv) {
  scene = new Scene();
  UserInterface ui;
  ui.show();
  return Fl::run();
}

void UserInterface::cb_window_i(Fl_Double_Window*, void*) {
  ;
}
void UserInterface::cb_window(Fl_Double_Window* o, void* v) {
  ((UserInterface*)(o->user_data()))->cb_window_i(o,v);
}

void UserInterface::cb_Load_i(Fl_Menu_*, void*) {
  char *newfile = fl_file_chooser("Load File ?", "*.obj", "../../Data/3d/croissants.obj");
if (!newfile) return;
{
scene->LoadObject(newfile);
viewer->redraw();
}
label_alpha->value(scene->alpha);
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
slider_alpha->activate();
slider_simplices->activate();
label_simplices->activate();
}
void UserInterface::cb_Load(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void UserInterface::cb_Load1_i(Fl_Menu_*, void*) {
  char *newfile = fl_file_chooser("Load File ?", "*.smf", "../../Data/3d/helix.smf");
if (!newfile) return;
{
scene->LoadObject(newfile);
viewer->redraw();
}
label_alpha->value(scene->alpha);
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
slider_alpha->activate();
slider_simplices->activate();
label_simplices->activate();
}
void UserInterface::cb_Load1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Load1_i(o,v);
}

void UserInterface::cb_Random_i(Fl_Menu_*, void*) {
  const char *str = fl_input("Number of vertices ?", "6");
if (!str) return;
scene->randomPointsOnCircle(std::stoi(std::string(str)));
viewer->redraw();
label_alpha->value(scene->alpha);
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
slider_alpha->activate();
slider_simplices->activate();
label_simplices->activate();
}
void UserInterface::cb_Random(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Random_i(o,v);
}

void UserInterface::cb_SooNodes_i(Fl_Menu_*, void*) {
  cout << "Root :" << endl;
scene->root->printTree();
}
void UserInterface::cb_SooNodes(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_SooNodes_i(o,v);
}

void UserInterface::cb_Camera_i(Fl_Menu_*, void*) {
  cout << "Camera position :" << endl;
scene->PrintCameraPosition();
}
void UserInterface::cb_Camera(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Camera_i(o,v);
}

void UserInterface::cb_Range_i(Fl_Menu_*, void*) {
  scene->PrintRange();
}
void UserInterface::cb_Range(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Range_i(o,v);
}

void UserInterface::cb_Object_i(Fl_Menu_*, void*) {
  cout << "Object [" << scene->object_short_name << "] :" << endl;
Write(cout, scene->vertices);
}
void UserInterface::cb_Object(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Object_i(o,v);
}

void UserInterface::cb_Image_i(Fl_Menu_*, void*) {
  string file_name;

if (scene->object_short_name.empty())
  file_name = "image.tiff";
else
  file_name = "image-" + scene->object_short_name + ".tiff";

cout << "Saving image in [ " << file_name << " ]" << endl;

viewer->SaveTiff(file_name, 0, 0, 400, 400);
}
void UserInterface::cb_Image(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Image_i(o,v);
}

void UserInterface::cb_Quit_i(Fl_Menu_*, void*) {
  exit(0);
}
void UserInterface::cb_Quit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

Fl_Menu_Item UserInterface::menu_menubar[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_ENGRAVED_LABEL, 1, 14, 0},
 {"Load .obj...", 0,  (Fl_Callback*)UserInterface::cb_Load, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Load .smf...", 0,  (Fl_Callback*)UserInterface::cb_Load1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Random points on circle", 0,  (Fl_Callback*)UserInterface::cb_Random, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Display", 0,  0, 0, 64, (uchar)FL_EMBOSSED_LABEL, 1, 14, 0},
 {"SooNodes", 0,  (Fl_Callback*)UserInterface::cb_SooNodes, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Camera position", 0,  (Fl_Callback*)UserInterface::cb_Camera, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Range", 0,  (Fl_Callback*)UserInterface::cb_Range, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Object vertices", 0,  (Fl_Callback*)UserInterface::cb_Object, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Save", 0,  0, 0, 64, (uchar)FL_EMBOSSED_LABEL, 1, 14, 0},
 {"Image", 0,  (Fl_Callback*)UserInterface::cb_Image, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Quit", 0x400071,  (Fl_Callback*)UserInterface::cb_Quit, 0, 0, (uchar)FL_EMBOSSED_LABEL, 1, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* UserInterface::file = UserInterface::menu_menubar + 0;

void UserInterface::cb_home_i(Fl_Button*, void*) {
  viewer->home();
viewer->redraw();
}
void UserInterface::cb_home(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_home_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_home[] = {
"24 24 -5 1",
" \0\0\0!\377\0\0\"\377\377\0#\0\0\377$\0\0\0",
"                        ",
"                        ",
"                        ",
"                        ",
"                        ",
"           $$ $$$       ",
"          $$$$$!$       ",
"         $$\"\"$$!$       ",
"        $$\"\"\"\"$$$       ",
"       $$\"\"\"\"\"\"$$       ",
"      $$\"\"\"\"\"\"\"\"$$      ",
"     $$\"\"\"\"\"\"\"\"\"\"$$     ",
"    $$$\"\"\"$$$$\"\"\"$$$    ",
"      $\"\"\"$##$\"\"\"$      ",
"      $\"\"\"$##$\"\"\"$      ",
"      $\"\"\"$##$\"\"\"$      ",
"      $\"\"\"$##$\"\"\"$      ",
"      $\"\"\"$##$\"\"\"$      ",
"      $$$$$$$$$$$$      ",
"                        ",
"                        ",
"                        ",
"                        ",
"                        "
};
static Fl_Image *image_home() {
  static Fl_Image *image = new Fl_Pixmap(idata_home);
  return image;
}

void UserInterface::cb_display_axes_i(Fl_Button*, void*) {
  scene->group_axes->changeDisplay();
viewer->redraw();
}
void UserInterface::cb_display_axes(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_display_axes_i(o,v);
}

static const char *idata_display_axis[] = {
"24 24 30 1",
"  c #0002ff",
". c #0809ff",
"X c #1010ff",
"o c #181cff",
"O c #2020ff",
"+ c #292cff",
"@ c #3938ff",
"# c #4142ff",
"$ c #4a4cff",
"% c #5255ff",
"& c #6261ff",
"* c #6a69ff",
"= c #7375ff",
"- c #7b7bff",
"; c #8385ff",
": c #8b8bff",
"> c #9495ff",
", c #9c9cff",
"< c #a4a3ff",
"1 c #acaeff",
"2 c #b4b4ff",
"3 c #bdbaff",
"4 c #cdcaff",
"5 c #d5d4ff",
"6 c #dedeff",
"7 c #e6e4ff",
"8 c #eeebff",
"9 c #f6f4ff",
"0 c Gray100",
"q c None",
"qqqqqqqqqqqqqqqqqqqqqqqq",
"qqqqqqqqqqqqqqqqqqqqqqqq",
"qqqqqqqqqqq:::qqqqqqqqqq",
"qqqqqqqqqqq   qqqqqqqqqq",
"qqqqqqqqqqq9qqqqqqqqqqqq",
"qqqqqqqqqqq> 9qqqqqqqqqq",
"qqqqqqqqqqq> 8qqqqqqqqqq",
"qqqqqqqqqqq, 8qqqqqqqqqq",
"qqqqqqqqqqq, 7qqqqqqqqqq",
"qqqqqqqqqqq< 7qqqqqqqqqq",
"qqqqqqqqqqq< 7qqqqqqqqqq",
"qqqqqqqqqqq< 7qqqqqqqqqq",
"qqqqqqqqqqq< 6qqqqqqqqqq",
"qqqqqqqqqqq>o2qqqqqqqqqq",
"qqqqqqqqq;X * #4qqqqqqqq",
"qqqqqq8=  =8q5# %8qqqqqq",
"qqqq6& .:qqqqqq3+ -qqqqq",
"q5 2 O>qqqqqqqqqq,..q+%q",
"qq$@1qqqqqqqqqqqqqq-< 7q",
"qq,qqqqqqqqqqqqqqqqqqqqq",
"qqqqqqqqqqqqqqqqqqqqqqqq",
"qqqqqqqqqqqqqqqqqqqqqqqq",
"qqqqqqqqqqqqqqqqqqqqqqqq",
"qqqqqqqqqqqqqqqqqqqqqqqq"
};
static Fl_Image *image_display_axis() {
  static Fl_Image *image = new Fl_Pixmap(idata_display_axis);
  return image;
}

void UserInterface::cb_display_vertices_i(Fl_Button*, void*) {
  scene->group_vertices->changeDisplay();
viewer->redraw();
}
void UserInterface::cb_display_vertices(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_display_vertices_i(o,v);
}

static const char *idata_display_pointcloud[] = {
"24 24 3 1",
"  c #000200",
". c Gray100",
"X c None",
"XXXXXXXXXXXXXXXX  XXXXXX",
"XXXXXXXX  XXX  X  XXXXXX",
"XXXXXXX   XXX     XXXXXX",
"XXXX      X  X   XXXXXXX",
"XXXX         X   XXXXXXX",
"  XXXXXX    XX   XXXXXXX",
"  XXX        XX  XXXXXXX",
"XX           XX      XXX",
"XX    X       X      XXX",
"  XX  XXXX       X  XXXX",
"  XXXXXXXX       XXXXXXX",
"XXXX   XXX     X     XXX",
"XXXX      X           XX",
"XXXXX     X             ",
"XXXXX     XX   XX  X    ",
"XXXXXXX  XXXXX     X  XX",
"XX  XXXXX  X       X  XX",
"XX  XXXX         XXXXXXX",
"XXXXXXXX         XXXXXXX",
"XXXXXXXXX  XX     XXXXXX",
"XXXXXXXXXX  XXXX  XXXXXX",
"XXXXXX      XXXXXXXXXXXX",
"XXXX       XXXXXXXXXXXXX",
"XXXX   XXXXXXXXXXXXXXXXX"
};
static Fl_Image *image_display_pointcloud() {
  static Fl_Image *image = new Fl_Pixmap(idata_display_pointcloud);
  return image;
}

void UserInterface::cb_display_vertices_embellished_i(Fl_Button* o, void*) {
  scene->group_vertices_embellished->setDisplay(o->value()*(1-button_weighted->value()));
scene->group_radius_spheres->setDisplay(o->value()*button_weighted->value());
viewer->redraw();
}
void UserInterface::cb_display_vertices_embellished(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_display_vertices_embellished_i(o,v);
}

void UserInterface::cb_zoom_plus_i(Fl_Button*, void*) {
  scene->zoom(1);
viewer->redraw();
}
void UserInterface::cb_zoom_plus(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_zoom_plus_i(o,v);
}

static const char *idata_zoom[] = {
"28 28 -44 1",
"!5:<\"9>?#9>@$;@B%=CE&IOQ\'OTV(UWS)QUW*SWY+UZ[,[`b-ejk.swy/y|}0\177\203\204""\
1\202\207\205""2\203\207\210""3\223\226\227""4\226\231\231""5\257\260\255""6\
\260\261\256""7\257\263\260""8\260\262\262""9\273\275\274:\277\301\301;\306\
\307\306<\306\310\307=\313\316\312>\320\321\322?\323\324\324@\327\332\323""A\
\331\332\330""B\334\335\332""C\337\341\334""D\341\343\336""E\344\346\341""F\
\350\351\346G\350\351\347H\351\352\346I\356\356\354J\361\361\361K\362\362\362L\
\363\363\363",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLL?/*!\'.;LLLLLLLLLLLL",
"LLLLLLLL3%4<B=5&2ILLLLLLLLLL",
"LLLLLLK4,AHFECB@10LLLLLLLLLL",
"LLLLLL?%AIII5ID@@\':LLLLLLLLL",
"LLLLLL/4IIII(IIC@:-LLLLLLLLL",
"LLLLLL(<FIII(IIIB@#JLLLLLLLL",
"LLLLLL!AE5(((((6CD#ELLLLLLLL",
"LLLLLL\'=CIII(IIIEB#LLLLLLLLL",
"LLLLLL.5CCII(IIIE9,LLLLLLLLL",
"LLLLLL<\'@@CI5IHII*8LLLLLLLLL",
"LLLLLLL22@@@DFGG0-LLLLLLLLLL",
"LLLLLLKI0+;@CA9+-%&=LLLLLLLL",
"LLLLLLKLL:-%%$,7L\'!%>LLLLLLL",
"LLLLLLLLLLKLDLLLL?%\"#?LLLLLL",
"LLLLLLLLLLLLLLLLLL>##\'LLLLLL",
"LLLLLLLLLLLLLLLLLLL?).LLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL",
"LLLLLLLLLLLLLLLLLLLLLLLLLLLL"
};
static Fl_Image *image_zoom() {
  static Fl_Image *image = new Fl_Pixmap(idata_zoom);
  return image;
}

void UserInterface::cb_zoom_moins_i(Fl_Button*, void*) {
  scene->zoom(-1);
viewer->redraw();
}
void UserInterface::cb_zoom_moins(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_zoom_moins_i(o,v);
}

static const char *idata_zoom1[] = {
"28 28 -46 1",
"!5:<\"8=>#8>@$9>@%=CE&BFF\'IOQ(OTV)UWS*QUV+SWY,UZ[-[`b.ejk/swy0txy1y|}2\177\
\203\204""3\202\207\205""4\203\207\210""5\223\226\227""6\226\231\231""7\257\
\260\254""8\260\261\256""9\257\263\260:\273\275\274;\277\301\276<\277\301\301=\
\306\307\306>\306\310\307?\313\316\312@\320\321\322""A\323\324\324""B\326\331\
\323""C\334\336\330""D\334\335\332""E\337\341\334""F\341\343\336G\341\342\342H\
\344\346\341I\350\351\346J\352\353\350K\354\354\352L\356\356\354M\362\362\362N\
\363\363\363",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNA1+!(/=NNNNNNNNNNNN",
"NNNNNNNN5%6>D?7\'4KNNNNNNNNNN",
"NNNNNMM6-DLKIEEB32NNNNNNNNNN",
"NNNNNMA%DKKKKKFBB*;NNNNNNNNN",
"NNNNNN16KKKLLLLEB;.NNNNNNNNN",
"NNNNNN)>IKKLLLLJDB$NNNNNNNNN",
"NNNNNN!CH8)))))8DE!GNNNNNNNN",
"NNNNNN(?FKLLLLLKID%NNNNNNNNN",
"NNNNNN07EELLLLLKI:-NNNNNNNNN",
"NNNNNN>(BBFKLLJKK*9NNNNNNNNN",
"NNNNNNN44BBEEFHK2.NNNNNNNNNN",
"NNNNNNNK2,>BEE:,.&\'ANNNNNNNN",
"NNNNNNNNN<.%%#-9N\'!$@NNNNNNN",
"NNNNNNNNNNMNGMNNNA%%$@NNNNNN",
"NNNNNNNNNNNNNNNNNNA$\"(NNNNNN",
"NNNNNNNNNNNNNNNNNNNA*/NNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN",
"NNNNNNNNNNNNNNNNNNNNNNNNNNNN"
};
static Fl_Image *image_zoom1() {
  static Fl_Image *image = new Fl_Pixmap(idata_zoom1);
  return image;
}

void UserInterface::cb_zoom_to_fit_i(Fl_Button*, void*) {
  scene->UpdateRange();
viewer->redraw();
}
void UserInterface::cb_zoom_to_fit(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_zoom_to_fit_i(o,v);
}

static const char *idata_zoom_to_fit[] = {
"28 28 -107 1",
"!\3\3\3\"\7\7\b#\17\17\17$\24\25\25%\27\27\27&\35\35\36\'\35\36 ()(#)+*$*))*+\
)*+,../-,/1.-16/23503461<<=2?\?\?3<>@4?@B5EEE6FFF7GIJ8MMM9NNN:OOO;WUQ<VVV=WWW>\
]]]?aaa@lllAqqqBsssCtx{Dux{E|||F\376\304\27G\367\303\"H\377\324RI\376\326_J\
\377\327_K\\o\204L\\q\206Mmx\204Nmy\204Ow\210\231P\201\201\201Q\204\214\224R\
\215\220\224S\240\240\240T\245\245\245U\271\271\271V\377\342\213W\375\343\223X\
\365\343\243Y\374\346\245Z\215\250\305[\224\253\304\\\235\274\336]\261\272\
\303^\247\304\342_\241\302\344`\247\306\346""a\251\304\341""b\251\305\343""c\
\256\310\344""d\255\311\350""e\262\315\351""f\276\324\353g\301\301\301h\307\
\307\307i\314\314\314j\316\316\316k\323\323\323l\331\331\331m\337\337\337n\
\376\361\305o\377\361\311p\376\364\324q\376\366\336r\307\325\345s\311\327\347t\
\302\326\353u\303\330\356v\310\331\353w\324\334\346x\321\337\355y\310\333\360z\
\313\335\360{\324\341\357|\322\340\360}\330\345\362~\333\350\365\177\340\340\
\340\200\354\354\354\201\342\354\367\202\344\355\367\203\352\360\366\204\350\
\360\370\205\355\363\372\206\360\360\360\207\361\361\361\210\363\363\363\211\
\376\373\365\212\364\370\374\213\377\376\374",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210T?+\"+>S\210\210\210\210\210\210\210\
\210\210\210\210",
"\210\210\210\210\210\210\210\210\177""9+R]w]Q+1m\210\210\210\210\210\210\210\
\210\210",
"\210\210\210\210\210\210q\177&D\203\205\205\204\201~zM$k\210\210\210\210\210\
\210\210\210",
"\210\210\210\210\210\210\210""8DD<:617}}yM/\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210T)\210=\211\213oW+{}yf.P\210\210\210\210\210\210\210",
"\210\210\210\210\210\210>R\212:\213H\213H)svtfO4\200\210\210\210\210\210\210",
"\210\210\210\210\210\210+a\205""6pVA;9633e[&m\210\210\210\210\210\210",
"\210\210\210\210\210\210\"{\203""6YJ<q\213nV+cb!i\210\210\210\210\210\210",
"\210\210\210\210\210\210+]\202""9/+6\213H\213H(`Z&h\210\210\210\210\210\210",
"\210\210\210\210\210\210>Q~xsr6pV\213""F\'`N6k\210\210\210\210\210\210",
"\210\210\210\210\210\210S,|||z3XIGG$\\3Cm\207\210\210\210\210\210",
"\210\210\210\210\210\210\210""2Mzyu:*\'\'#\'K\'U\202\210\210\210\210\210\210",
"\210\210\210\210\210\210\210l$Mfteed`_L\"!@\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210i0-O[^ZN3\'\"!!B\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\200""E4&!%5EU@!!P\210\210\210\210\210\
\210",
"\210\210\210\210\210\210\210\210\210\210\210\177lggjm\200\210""BP\210\210\
\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\206\207\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210",
"\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\210\
\210\210\210\210\210\210\210\210\210"
};
static Fl_Image *image_zoom_to_fit() {
  static Fl_Image *image = new Fl_Pixmap(idata_zoom_to_fit);
  return image;
}

void UserInterface::cb_X_i(Fl_Button*, void*) {
  scene->translate(0.1,0.0,0.0);
viewer->redraw();
}
void UserInterface::cb_X(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_X_i(o,v);
}

void UserInterface::cb_X1_i(Fl_Button*, void*) {
  scene->translate(-0.1,0.0,0.0);
viewer->redraw();
}
void UserInterface::cb_X1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_X1_i(o,v);
}

void UserInterface::cb_Y_i(Fl_Button*, void*) {
  scene->translate(0.0,0.1,0.0);
viewer->redraw();
}
void UserInterface::cb_Y(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Y_i(o,v);
}

void UserInterface::cb_Y1_i(Fl_Button*, void*) {
  scene->translate(0.0,-0.1,0.0);
viewer->redraw();
}
void UserInterface::cb_Y1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Y1_i(o,v);
}

void UserInterface::cb_Z_i(Fl_Button*, void*) {
  scene->translate(0.0,0.0,0.1);
viewer->redraw();
}
void UserInterface::cb_Z(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Z_i(o,v);
}

void UserInterface::cb_Z1_i(Fl_Button*, void*) {
  scene->translate(0.0,0.0,-0.1);
viewer->redraw();
}
void UserInterface::cb_Z1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Z1_i(o,v);
}

void UserInterface::cb_param_size_points_vertices_i(Fl_Value_Input* o, void*) {
  scene->param_size_points_vertices = (double)o->value();
scene->group_vertices->touch();
viewer->redraw();
}
void UserInterface::cb_param_size_points_vertices(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_param_size_points_vertices_i(o,v);
}

void UserInterface::cb_display_selected_vertex_i(Fl_Button*, void*) {
  scene->group_selected_vertex->changeDisplay();
viewer->redraw();
}
void UserInterface::cb_display_selected_vertex(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_display_selected_vertex_i(o,v);
}

void UserInterface::cb_param_size_spheres_i(Fl_Value_Input* o, void*) {
  scene->param_size_spheres_vertices = (double)o->value();
scene->group_vertices_embellished->touch();
viewer->redraw();
}
void UserInterface::cb_param_size_spheres(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_param_size_spheres_i(o,v);
}

void UserInterface::cb_display_triangles_i(Fl_Button*, void*) {
  scene->group_triangles->changeDisplay();
viewer->redraw();
}
void UserInterface::cb_display_triangles(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_display_triangles_i(o,v);
}

static const char *idata_display_surface[] = {
"24 24 50 1",
"  c #000808",
". c #080c08",
"X c #081110",
"o c #081810",
"O c #081818",
"+ c #102320",
"@ c #102820",
"# c #182820",
"$ c #182b29",
"% c #183029",
"& c #183431",
"* c #203831",
"= c #203c39",
"- c #294c4a",
"; c #29504a",
": c #315d52",
"> c #315d5a",
", c #31615a",
"< c #39645a",
"1 c #396c62",
"2 c #396d6a",
"3 c #39726a",
"4 c #41746a",
"5 c #417a73",
"6 c #41817b",
"7 c #4a837b",
"8 c #4a8d83",
"9 c #4a9183",
"0 c #52938b",
"q c #5a998b",
"w c #529d94",
"e c #5a9994",
"r c #5aa194",
"t c #5aa29c",
"y c #5aaa9c",
"u c #5aaaa4",
"i c #62aea4",
"p c #62b2a4",
"a c #62baac",
"s c #6ac3b4",
"d c #6ac6bd",
"f c #6acabd",
"g c #73cbbd",
"h c #9cfaee",
"j c #a4fff6",
"k c #a4ffff",
"l c #acffff",
"z c #b4ffff",
"x c Gray100",
"c c None",
"ccccc9cccccccccccccccccc",
"ccccas8,:ccccccccccccccc",
"ccccse7>,-cccccccccccccc",
"cccc0e07:;-ccccccccccccc",
"ccccXqe6<--1cccccccccccc",
"ccccc.075,11ccccsfwrwrcc",
"cccccce77jjw2dgdgdtwtwcc",
"cccccc 0jlhjjjdgsrwrwrcc",
"ccccccculljjljllgwtwtwcc",
"cccccc3iyljjjljl&*&*&ccc",
"cccccciiilljlll2*&=ccccc",
"ccccc4yiyilljl3#&ccccccc",
"cccc4ypypizkl3#+Xccccccc",
"cccc1iyiyiyl34+X$ccccccc",
"ccc%iyiuiupl4141%ccccccc",
"cccc+@+&%&3yt912$ccccccc",
"cccc&+$+cc5tu831<ccccccc",
"cccccccccc3y8012,ccccccc",
"cccccccccc5y080><,cccccc",
"cccccccccccy898<>,,ccccc",
"cccccccccccO=*=,==cccccc",
"cccccccccccco=&$$=cccccc",
"cccccccccccccO=$%ccccccc",
"ccccccccccccccc%cccccccc"
};
static Fl_Image *image_display_surface() {
  static Fl_Image *image = new Fl_Pixmap(idata_display_surface);
  return image;
}

void UserInterface::cb_coef_transparency_i(Fl_Value_Input* o, void*) {
  scene->group_triangles->material_filled->setTransparency( (double)o->value() );
viewer->redraw();
}
void UserInterface::cb_coef_transparency(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_coef_transparency_i(o,v);
}

void UserInterface::cb_transparent_i(Fl_Button*, void*) {
  scene->transparent = ! scene->transparent;
if (scene->transparent) {
  scene->group_triangles->material_filled->setTransparency((double)coef_transparency->value());
  coef_transparency->show();
  }
else {
  scene->group_triangles->material_filled->setTransparency(0.0);
  coef_transparency->hide();
  }
viewer->redraw();
}
void UserInterface::cb_transparent(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_transparent_i(o,v);
}

void UserInterface::cb_MATERIAL_FILLED_AND_OUTLINES_i(Fl_Button*, void*) {
  scene->group_triangles->set(SooGroupMaterial::FILLED_AND_OUTLINES);
viewer->redraw();
}
void UserInterface::cb_MATERIAL_FILLED_AND_OUTLINES(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_MATERIAL_FILLED_AND_OUTLINES_i(o,v);
}

static const char *idata_ico0[] = {
"24 24 86 1",
"  c #000200",
". c #080400",
"X c #080a08",
"o c #100c08",
"O c #101210",
"+ c #181410",
"@ c #181818",
"# c #201a18",
"$ c #202120",
"% c #292320",
"& c #292c29",
"* c #312829",
"= c #392c29",
"- c #392c31",
"; c #313231",
": c #393231",
"> c #393839",
", c #413431",
"< c #413439",
"1 c #413831",
"2 c #413839",
"3 c #4a3c39",
"4 c #4a3c41",
"5 c #4a4039",
"6 c #4a4141",
"7 c #4a484a",
"8 c #524441",
"9 c #5a4a4a",
"0 c #5a4c52",
"q c #5a504a",
"w c #525352",
"e c #5a5a5a",
"r c #624c4a",
"t c #624c52",
"y c #625252",
"u c #6a5b5a",
"i c #735d5a",
"p c #626462",
"a c #6a6c6a",
"s c #736262",
"d c #7b6562",
"f c #7b696a",
"g c Gray45",
"h c #7b7c7b",
"j c Blue",
"k c #836d6a",
"l c #8b6d6a",
"z c #837173",
"x c #8b7573",
"c c #947573",
"v c #947b7b",
"b c #838383",
"n c #8b8583",
"m c #8b8b8b",
"M c #9c8183",
"N c #949394",
"B c Gray61",
"V c #a4898b",
"C c #ac8d8b",
"Z c #bd9a9c",
"A c #a4a3a4",
"S c #acadac",
"D c #b4b3b4",
"F c Gray74",
"G c #9e9cf3",
"H c #c5a5a4",
"J c #cdaaac",
"K c #d5aeac",
"L c #d5b2b4",
"P c #deb6b4",
"I c #debabd",
"U c #e6babd",
"Y c #c5c2c5",
"T c #cdcccd",
"R c #d5d4d5",
"E c Gray87",
"W c #eec6c5",
"Q c #eecacd",
"! c #f6cccd",
"~ c #f6d2d5",
"^ c #ffd2d5",
"/ c #e6e4e6",
"( c #eeebee",
") c #fff6f6",
"_ c Gray100",
"` c None",
"````````````````````````",
"`````````EYSNbT`````````",
"``````O;OX-CAq%ADF``````",
"`````BZPLP84B0ZM0OS`````",
"````muPLMXA_By~K#V9G````",
"```R%PH<e___Nu!!UOVX````",
"```@Jd@D____Nu^!!!Xtg```",
"``pZ%g______ms!!Q!WO*D``",
"`Su&R)______ms~!!!!W#X``",
"F+n)__)_____bf!!!!W!W* `",
"4e___)______bf^!!!!Q!W2B",
"S0 A)_)_____hk!!Q!W!WH*%",
"`@x-7/______hz~!!!!Wi%8;",
"`m,vuOb_____gx!!!!MX=t+F",
"``Xovv4+T___gx^!I<%ty37`",
"``eycvvk@a__av!f@4ry9>T`",
"``T#vvvvv9XDav@*yyyy5w``",
"```>svcvvvl*w18yrt9y$E``",
"```A-vvvvv6o$ 8yyyy:p```",
"````.vvvroO*%*X*9yr(/```",
"````b4k$O%*%*%*O+9:g````",
"````G< %O@O@O@O#+:B`````",
"`````NNmmbbhhggaapa`````",
"````````````````````````"
};
static Fl_Image *image_ico0() {
  static Fl_Image *image = new Fl_Pixmap(idata_ico0);
  return image;
}

void UserInterface::cb_MATERIAL_OUTLINES_i(Fl_Button*, void*) {
  scene->group_triangles->set(SooGroupMaterial::OUTLINES);
viewer->redraw();
}
void UserInterface::cb_MATERIAL_OUTLINES(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_MATERIAL_OUTLINES_i(o,v);
}

static const char *idata_ico1[] = {
"24 24 35 1",
"  c Gray0",
". c #080a08",
"X c #101210",
"o c #181918",
"O c #202220",
"+ c #292a29",
"@ c #313231",
"# c #393839",
"$ c #414241",
"% c #4a494a",
"& c #525352",
"* c #5a5c5a",
"= c #626362",
"- c #6a6b6a",
"; c #737273",
": c #7b7a7b",
"> c Blue",
", c #7e7df5",
"< c #838383",
"1 c #8b8b8b",
"2 c #949394",
"3 c Gray61",
"4 c #a4a3a4",
"5 c #acadac",
"6 c #b4b4b4",
"7 c Gray74",
"8 c #c5c4c5",
"9 c #cdcccd",
"0 c #d5d4d5",
"q c #deddde",
"w c #e6e6e6",
"e c #eeecee",
"r c #f6f3f6",
"t c Gray100",
"y c None",
"yyyyyyyyyyyyyyyyyyyyyyyy",
"yyyyyyyyyq852<9yyyyyyyyy",
"yyyyyyX@tt$84=#467yyyyyy",
"yyyyy3qttt=$3-8w2&5yyyyy",
"yyyy1:tt5.4t3-tq+t<,yyyy",
"yyy0@t,%&ttt2;tteot@yyyy",
"yyyoe2o6tttt2;tttt.2;yyy",
"yy=0@;tttttt1:tttttX&6yy",
"y5:+0ttttttt1:ttttttOXyy",
"7o1ttttttttt<<ttttttt@+y",
"$*tttttttttt<<tttttttt%3",
"54 4tttttttt:1ttttttt0@-",
"yoe=%wtttttt:1tttttt;@0@",
"y1:t7O<ttttt;2tttt4.2t$7",
"yyXttt<+9ttt;2ttw$*rt7%y",
"yy*4tttq@-tt-2t<O7ttt#9y",
"yy9#ttttt2X6-3o<tttt6&yy",
"yyy#9tttttr&&4wtttttOqyy",
"yyy4=ttttt<o6.8tttt4=yyy",
"yyyy.ttt5o<ttt$:tttewyyy",
"yyyy<<q$*ettttt1@e2;yyyy",
"yyyy,;+8:<<<1212233yyyyy",
"yyyyy2211<<::;;--=-yyyyy",
"yyyyyyyyyyyyyyyyyyyyyyyy"
};
static Fl_Image *image_ico1() {
  static Fl_Image *image = new Fl_Pixmap(idata_ico1);
  return image;
}

void UserInterface::cb_MATERIAL_FILLED_i(Fl_Button*, void*) {
  scene->group_triangles->set(SooGroupMaterial::FILLED);
viewer->redraw();
}
void UserInterface::cb_MATERIAL_FILLED(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_MATERIAL_FILLED_i(o,v);
}

static const char *idata_ico2[] = {
"24 24 21 1",
"  c #292420",
". c #312829",
"X c #5a4c4a",
"o c #624c4a",
"O c #625252",
"+ c Blue",
"@ c #947573",
"# c #947b7b",
"$ c #a4898b",
"% c #ac8d8b",
"& c #d5b2b4",
"* c #deb6b4",
"= c #debabd",
"- c #eec6c5",
"; c #eecacd",
": c #f6cccd",
"> c #f6d2d5",
", c #ffd2d5",
"< c #fff6f6",
"1 c Gray100",
"2 c None",
"222222222222222222222222",
"222222222222222222222222",
"22222222*&=*1:%222222222",
"222222&*&*&11::%$%222222",
"22222**&=1111:>:$$%22222",
"2222&*&*11111>:::%$%2222",
"2222*&1111111:,:::$$2222",
"222*&11111111:::;:-:$222",
"22*11<1111111:>::::-:$22",
"2*<<111111111>::::-:-;$2",
"2<1<1<1111111:,::::;:-:2",
"2##1<11111111:::;:-:---o",
"22#@111111111:>::::-:-O2",
"22@###1111111:::::-:oOX2",
"22######11111:,:::OOOO22",
"222#@###@1111:::;OoOX222",
"222@#######11:>OOOOOO222",
"2222##@###@#1OXOoOXO2222",
"2222#######@. OOOOOO2222",
"2222@###@# . . OXOo22222",
"22222###. . . . OOO22222",
"22222# . . . . . O222222",
"222222222222222222222222",
"222222222222222222222222"
};
static Fl_Image *image_ico2() {
  static Fl_Image *image = new Fl_Pixmap(idata_ico2);
  return image;
}

void UserInterface::cb_MATERIAL_FILLED_AND_LINES_i(Fl_Button*, void*) {
  scene->group_triangles->set(SooGroupMaterial::FILLED_AND_LINES);
viewer->redraw();
}
void UserInterface::cb_MATERIAL_FILLED_AND_LINES(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_MATERIAL_FILLED_AND_LINES_i(o,v);
}

static const char *idata_ico3[] = {
"24 24 167 2",
"   c #080c08",
".  c #100400",
"X  c #100c08",
"o  c #180400",
"O  c #180808",
"+  c #101010",
"@  c #200a08",
"#  c #201310",
"$  c #291810",
"%  c #291818",
"&  c #292420",
"*  c #312420",
"=  c #312829",
"-  c #392020",
";  c #411310",
":  c #4a1410",
">  c #4a1818",
",  c #520808",
"<  c #5a0400",
"1  c #5a0c08",
"2  c #521b18",
"3  c #412020",
"4  c #412a29",
"5  c #4a2420",
"6  c #4a2429",
"7  c #413431",
"8  c #4a3431",
"9  c #522c29",
"0  c #5a2829",
"q  c #523431",
"w  c #5a3c39",
"e  c #621210",
"r  c #621918",
"t  c #6a1010",
"y  c #731410",
"u  c #622020",
"i  c #6a2220",
"p  c #6a2c29",
"a  c #623839",
"s  c #6a3a39",
"d  c #732020",
"f  c #7b2420",
"g  c #733231",
"h  c #733a39",
"j  c #7b3c39",
"k  c #5a3c41",
"l  c #524441",
"z  c #5a4041",
"x  c #5a4a4a",
"c  c #624c4a",
"v  c #624c52",
"b  c #625252",
"n  c #6a5052",
"m  c #734c4a",
"M  c #7b4441",
"N  c #7b4a4a",
"B  c #7b5552",
"V  c #7b6a6a",
"C  c #7b7373",
"Z  c Blue",
"A  c #833031",
"S  c #942020",
"D  c #942829",
"F  c #ac1c18",
"G  c #ac2020",
"H  c #ac2c29",
"J  c #b42829",
"K  c #b43839",
"L  c #833c41",
"P  c #834a4a",
"I  c #8b4c4a",
"U  c #835352",
"Y  c #835d5a",
"T  c #8b5552",
"R  c #945d5a",
"E  c #8b6162",
"W  c #8b6b6a",
"Q  c #837573",
"!  c #83797b",
"~  c #8b7d7b",
"^  c #946162",
"/  c #946d6a",
"(  c #9c696a",
")  c #947473",
"_  c #947b7b",
"`  c #bd4441",
"\'  c #b45d5a",
"]  c #bd5052",
"[  c #a47173",
"{  c #b46562",
"}  c #c55552",
"|  c #cd5d5a",
" . c #c56562",
".. c #c56d6a",
"X. c #cd6362",
"o. c #cd696a",
"O. c #cd7573",
"+. c #cd7d7b",
"@. c #d56d6a",
"#. c #d57373",
"$. c #d5757b",
"%. c #d57b7b",
"&. c #837df5",
"*. c #948583",
"=. c #9c8183",
"-. c #9c8d8b",
";. c #9c9594",
":. c #a4898b",
">. c #ac8183",
",. c #ac858b",
"<. c #a49594",
"1. c #a49d9c",
"2. c #b48583",
"3. c #b4898b",
"4. c #b49d9c",
"5. c #bd9594",
"6. c #bd999c",
"7. c #aca1a4",
"8. c #b4a1a4",
"9. c #b4aeac",
"0. c #b4b2b4",
"q. c #bdb2b4",
"w. c #bebbf1",
"e. c #cd8d8b",
"r. c #d58383",
"t. c #d5858b",
"y. c #de8283",
"u. c #de8983",
"i. c #de8b8b",
"p. c #d59194",
"a. c #d59d9c",
"s. c #de9394",
"d. c #de9b9c",
"f. c #d59da4",
"g. c #c5a3a4",
"h. c #c5aeac",
"j. c #c5bebd",
"k. c #cdb2b4",
"l. c #cdbebd",
"z. c #d5a5a4",
"x. c #dea1a4",
"c. c #deaaac",
"v. c #d5b2b4",
"b. c #deb5b4",
"n. c #e69d9c",
"m. c #e6a5a4",
"M. c #e6acac",
"N. c #e6aeb4",
"B. c #e6bdbd",
"V. c #eebabd",
"C. c #c5c2c5",
"Z. c #cdcacd",
"A. c #d5cacd",
"S. c Gray87",
"D. c #e6cecd",
"F. c #eec6c5",
"G. c #eecacd",
"H. c #e6dede",
"J. c #eed2d5",
"K. c #f6cccd",
"L. c #f6d3d5",
"P. c #ffd2d5",
"I. c #eee4e6",
"U. c #f6ecee",
"Y. c #fff6f6",
"T. c Gray100",
"R. c None",
"R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.",
"R.R.R.R.R.R.R.R.R.S.C.9.;.i.Z.R.R.R.R.R.R.R.R.R.",
"R.R.R.R.R.R.> 8 +   7 p.M.| * 7.q.j.R.R.R.R.R.R.",
"R.R.R.R.R.8.6.b.v.b.] } x.X.f.=.v : k.R.R.R.R.R.",
"R.R.R.R.e.\' b.v.t.F M.T.m.X.L.N.d :.P &.R.R.R.R.",
"R.R.R.J.D b.z.`  .T.T.T.d.@.K.K.V.y :.O R.R.R.R.",
"R.R.R.S c...J B.T.T.T.T.n.o.P.K.K.K.t n C R.R.R.",
"R.R.{ a.H +.T.T.T.T.T.T.s.@.K.K.G.K.F.y 4 0.R.R.",
"R.b.| K L.Y.T.T.T.T.T.T.d.#.L.K.K.K.K.F.f @ R.R.",
"B.G t.T.T.T.T.T.T.T.T.T.t.$.K.K.K.K.F.K.F.A . R.",
"P R T.Y.T.T.T.T.T.T.T.T.s.#.P.K.K.K.K.G.K.F.L 4.",
"h.P < g.Y.T.T.T.T.T.T.T.r.$.K.K.G.K.F.K.F.z.p 6 ",
"R.i ) g I I.T.T.T.T.T.T.i.%.L.K.K.K.K.F.^ 0 x a ",
"R.3.h _ Y r ,.T.T.T.T.T.%.y.K.K.K.K.>.; 9 v ; l.",
"R.R.e X _ _ M r D.T.T.T.r.y.P.K.B.s 5 v b w m R.",
"R.R.^ U ) _ _ W r [ T.T.O.y.K.( 2 k c b x s A.R.",
"R.R.D.u _ _ _ _ _ N e k.$.u.2 9 b b b b z B R.R.",
"R.R.R.j E _ ) _ _ _ / p T L l v c b x b 0 H.R.R.",
"R.R.R.g.g _ _ _ _ _ M e 3 o l v b b b q W R.R.R.",
"R.R.R.R.1 _ _ _ N e ; = & = @ 4 x b c U.I.R.R.R.",
"R.R.R.R.2.M / i 2 & = & = & = O $ x q ) R.R.R.R.",
"R.R.R.R.w.h , - # % # % # % # % # 8 1.R.R.R.R.R.",
"R.R.R.R.R.5.<.-.-.*.*.~ ~ Q ! C V V V R.R.R.R.R.",
"R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R.R."
};
static Fl_Image *image_ico3() {
  static Fl_Image *image = new Fl_Pixmap(idata_ico3);
  return image;
}

void UserInterface::cb_MATERIAL_LINES_i(Fl_Button*, void*) {
  scene->group_triangles->set(SooGroupMaterial::LINES);
viewer->redraw();
}
void UserInterface::cb_MATERIAL_LINES(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_MATERIAL_LINES_i(o,v);
}

static const char *idata_ico4[] = {
"24 24 138 2",
"   c #200c08",
".  c #291410",
"X  c #392c29",
"o  c #411010",
"O  c #4a1818",
"+  c #5a0808",
"@  c #413031",
"#  c #413839",
"$  c #4a3431",
"%  c #522220",
"&  c #5a2829",
"*  c #621410",
"=  c #621818",
"-  c #6a1010",
";  c #6a1c18",
":  c #731818",
">  c #6a2020",
",  c #623431",
"<  c #623839",
"1  c #6a3c39",
"2  c #732420",
"3  c #732c29",
"4  c #7b2020",
"5  c #7b2c29",
"6  c #7b3b39",
"7  c #4a4441",
"8  c #524041",
"9  c #6a4441",
"0  c #625052",
"q  c #734a4a",
"w  c #7b5552",
"e  c #7b6a6a",
"r  c #7b7373",
"t  c Blue",
"y  c #625ef8",
"u  c #833431",
"i  c #833839",
"p  c #942020",
"a  c #9c3839",
"s  c #ac1c18",
"d  c #ac2829",
"f  c #b42829",
"g  c #b43a39",
"h  c #834441",
"j  c #83484a",
"k  c #8b4c4a",
"l  c #8b5552",
"z  c #944c4a",
"x  c #94595a",
"c  c #836162",
"v  c #8b6b6a",
"b  c #837573",
"n  c #83797b",
"m  c #8b7c7b",
"M  c #946162",
"N  c #9c6562",
"B  c #947373",
"V  c #a47373",
"C  c #ac7d7b",
"Z  c #b46562",
"A  c #c55552",
"S  c #c5595a",
"D  c #c56562",
"F  c #cd7273",
"G  c #cd7d7b",
"H  c #d57573",
"J  c #d57b7b",
"K  c #8b8183",
"L  c #948583",
"P  c #94898b",
"I  c #9c8183",
"U  c #9c8d8b",
"Y  c #949194",
"T  c #9c9494",
"R  c #a48583",
"E  c #ac8483",
"W  c #ac898b",
"Q  c #a49594",
"!  c #a49b9c",
"~  c #ac9194",
"^  c #ac9b9c",
"/  c #b48583",
"(  c #b4898b",
")  c #b49d9c",
"_  c #bd9594",
"`  c #bd999c",
"\'  c #aca1a4",
"]  c #b4a1a4",
"[  c #b4aeac",
"{  c #bda5a4",
"}  c #b4b2b4",
"|  c #bdb2b4",
" . c #bebbf1",
".. c #c58183",
"X. c #cd8d8b",
"o. c #d58383",
"O. c #d58c8b",
"+. c #de8c8b",
"@. c #de9494",
"#. c #de9c9c",
"$. c #c5a5a4",
"%. c #c5abac",
"&. c #c5b6b4",
"*. c #c5bebd",
"=. c #cdb2b4",
"-. c #cdbebd",
";. c #dea1a4",
":. c #d5b6b4",
">. c #d5bebd",
",. c #deb2b4",
"<. c #e69d9c",
"1. c #e6a4a4",
"2. c #e6abac",
"3. c #e6b6b4",
"4. c #e6bebd",
"5. c #c5c2c5",
"6. c #cdc4c5",
"7. c #cdcacd",
"8. c #d5cacd",
"9. c #dec4c5",
"0. c #decacd",
"q. c #ded4d5",
"w. c Gray87",
"e. c #e6cecd",
"r. c #eecacd",
"t. c #e6dede",
"y. c #eed2d5",
"u. c #eeddde",
"i. c #f6d6d5",
"p. c #f6dade",
"a. c #eee6e6",
"s. c #eeeaee",
"d. c #f6edee",
"f. c #ffeeee",
"g. c #f6f2f6",
"h. c #fff6f6",
"j. c Gray100",
"k. c None",
"k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.",
"k.k.k.k.k.k.k.k.k.w.5.[ T +.7.k.k.k.k.k.k.k.k.k.",
"k.k.k.k.k.k.O $ j.j.7 r.2.F # \' | *.k.k.k.k.k.k.",
"k.k.k.k.k.] t.j.j.j.F A ;.H 9.a.Y x =.k.k.k.k.k.",
"k.k.k.k.X...j.j.3.s 2.j.1.J j.u.u j.E y k.k.k.k.",
"k.k.k.y.a j.d.S D j.j.j.#.J j.j.d.4 j.@ k.k.k.k.",
"k.k.k.p f.@.f 4.j.j.j.j.<.J j.j.j.j.- T r k.k.k.",
"k.k.Z p.g G j.j.j.j.j.j.@.o.j.j.j.j.j.: 0 } k.k.",
"k.,.o.g i.j.j.j.j.j.j.j.#.O.j.j.j.j.j.j.5 . k.k.",
"4.d O.j.j.j.j.j.j.j.j.j.O.+.j.j.j.j.j.j.j.i X k.",
"j M j.j.j.j.j.j.j.j.j.j.@.+.j.j.j.j.j.j.j.j.z ) ",
"%.%.+ $.j.j.j.j.j.j.j.j.o.@.j.j.j.j.j.j.j.q.< v ",
"k.> d.N k a.j.j.j.j.j.j.+.@.j.j.j.j.j.j.B , q.< ",
"k.( C j.>.2 W j.j.j.j.j.J #.j.j.j.j.{ o ~ j.9 -.",
"k.k.; j.j.j.E 3 e.j.j.j.o.#.j.j.a.q c h.j.-.q k.",
"k.k.M %.j.j.j.u.6 V j.j.F 1.j.I % 6.j.j.j.1 8.k.",
"k.k.e.6 j.j.j.j.j.` = =.J 1.% R j.j.j.j.&.w k.k.",
"k.k.k.6 0.j.j.j.j.j.g.x l 2.a.j.j.j.j.j.& t.k.k.",
"k.k.k.$.N j.j.j.j.j./ > :.  6.j.j.j.j.] v k.k.k.",
"k.k.k.k.* j.j.j.%.; E j.j.h.8 m j.j.j.d.k.k.k.k.",
"k.k.k.k./ ( u.h M d.j.j.j.j.j.P $ s.^ B k.k.k.k.",
"k.k.k.k. .V 3 9.m K K P P T U Q ! ^ ! k.k.k.k.k.",
"k.k.k.k.k._ Q U U L L m m b n r e e e k.k.k.k.k.",
"k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k.k."
};
static Fl_Image *image_ico4() {
  static Fl_Image *image = new Fl_Pixmap(idata_ico4);
  return image;
}

void UserInterface::cb_slider_alpha_i(Fl_Slider* o, void*) {
  scene->updateAlpha(scene->alphamax*o->value());
label_alpha->value(scene->alphamax*o->value());
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
label_betti->value(scene->betti.c_str());
viewer->redraw();
}
void UserInterface::cb_slider_alpha(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_slider_alpha_i(o,v);
}

void UserInterface::cb_slider_simplices_i(Fl_Slider* o, void*) {
  scene->updateAlpha(0., o->value()*(scene->N-1));
label_alpha->value(scene->alpha);
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
label_betti->value(scene->betti.c_str());
viewer->redraw();
}
void UserInterface::cb_slider_simplices(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_slider_simplices_i(o,v);
}

void UserInterface::cb__i(Fl_Button*, void*) {
  scene->group_tetrahedra->changeDisplay();
viewer->redraw();
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb__i(o,v);
}

static const char *idata_display_convex_hull[] = {
"24 24 45 1",
"  c #080c08",
". c #081810",
"X c #081818",
"o c #102220",
"O c #182820",
"+ c #182c29",
"@ c #183029",
"# c #183431",
"$ c #183831",
"% c #203831",
"& c #203b39",
"* c #294c4a",
"= c #29504a",
"- c #396b62",
"; c #39716a",
": c #4a8d83",
"> c #4a9183",
", c #4a918b",
"< c #52958b",
"1 c #52998b",
"2 c #529c94",
"3 c #5a9d94",
"4 c #5aa194",
"5 c #5aa29c",
"6 c #62baac",
"7 c #6abaac",
"8 c #6abeb4",
"9 c #6ac2b4",
"0 c #73c6bd",
"q c #73cbbd",
"w c #73cec5",
"e c #7bcec5",
"r c #7bd2c5",
"t c #7bd6cd",
"y c #83d6cd",
"u c #83dacd",
"i c #83e2d5",
"p c #8be6de",
"a c #8beade",
"s c #94eede",
"d c #94eee6",
"f c #94f2e6",
"g c #9cf6e6",
"h c Gray100",
"j c None",
"jjjjj,jjjjjjjjjjjjjjjjjj",
"jjjj69222:jjjjjjjjjjjjjj",
"jjjj9pr89242:jjjjjjjjjjj",
"jjjjiapr0868622<jjjjjjjj",
"jjjjapserw97978686<jjjjj",
"jjjj-aprwr0w6868682524jj",
"jjjj-adsrwrwe787865442jj",
"jjjj--aderwe0w08652422jj",
"jjjj;-dsyrrwrww0824232jj",
"jjj=--adrrwrweqq12<2<2jj",
"jjj*--;ffrtrrwrq21312%jj",
"jjj=---fdtrrwrq2<212>jjj",
"jjj*;---gtyrtrr1312,&jjj",
"jjj=----fgrtrr1412,<$jjj",
"jjj@--;--futtr323<1&jjjj",
"jjjj+----gtyr212,<#&jjjj",
"jjjj#+--;-utu23<1<&%jjjj",
"jjjjj@+@--gur2,<,&$jjjjj",
"jjjjjjO+@-;u3<1<1%&jjjjj",
"jjjjjjjjoo+u,<,<$&$jjjjj",
"jjjjjjjjjjOX&%&<&&jjjjjj",
"jjjjjjjjjjj .&#++&jjjjjj",
"jjjjjjjjjjjjjX$+@jjjjjjj",
"jjjjjjjjjjjjjjj@jjjjjjjj"
};
static Fl_Image *image_display_convex_hull() {
  static Fl_Image *image = new Fl_Pixmap(idata_display_convex_hull);
  return image;
}

void UserInterface::cb_1_i(Fl_Button*, void*) {
  scene->group_edges->changeDisplay();
viewer->redraw();
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_1_i(o,v);
}

static const char *idata_display_boundary_edges[] = {
"24 24 33 1",
"  c #ff0200",
". c #ff0b08",
"X c #ff1210",
"o c #ff1b18",
"O c #ff2420",
"+ c #ff2b29",
"@ c #ff3231",
"# c #ff3b39",
"$ c #ff4241",
"% c #ff4a4a",
"& c #ff5252",
"* c #ff5c5a",
"= c #ff6362",
"- c #ff6d6a",
"; c #ff7373",
": c #ff7a7b",
"> c #ff8483",
", c #ff8a8b",
"< c #ff9494",
"1 c #ff9c9c",
"2 c #ffa4a4",
"3 c #ffadac",
"4 c #ffb5b4",
"5 c #ffbbbd",
"6 c #ffc5c5",
"7 c #ffcdcd",
"8 c #ffd4d5",
"9 c #ffddde",
"0 c #ffe3e6",
"q c #ffebee",
"w c #fff4f6",
"e c Gray100",
"r c None",
"rrrrrrr4$rrrrrrrrrrrrrrr",
"rrrrrrr $orrrrrrrrrrrrrr",
"rrr5 6$%rX;rrrrrrrrrrrrr",
"rrrr:.q <5 7rrrrrrrrrrrr",
"rrrr ,%1 0*Orrrr3&rO&;rr",
"rrrrw ,,%#,6r3&  @r*@Xrr",
"rrrrrw ,02;@ ;q>9rr+&rrr",
"rrrrrrw , X&>X =78900qqr",
"rrrrrr%#39rrrw18 3     r",
"rrrrr1 q28rrrX-&332211<r",
"rrrrw 1  q2$# 7 58rrrrrr",
"rrrr> r7w  $#3#$ q4rrrrr",
"rrr4O=8>0,3r%5 7 rrrrrrr",
"rrr5 7  %=orw@%rrrrrrrrr",
"rrr&@&<7wO:X  .rrrrrrrrr",
"rrr<=+  5#:.,6&&$rrrrrrr",
"rrr8 4w5>X> .r@r#,rrrrrr",
"rrrrrrrrr-> ro=r< qrrrrr",
"rrrrrrrrr5< r7 4r@8rrrrr",
"rrrrrrrrrr<*;14 :+ rrrrr",
"rrrrrrrrrrr+X  @ *5rrrrr",
"rrrrrrrrrrrr q6.+&rrrrrr",
"rrrrrrrrrrrr1 &rq@1rrrrr",
"rrrrrrrrrrrrrq@,rrrrrrrr"
};
static Fl_Image *image_display_boundary_edges() {
  static Fl_Image *image = new Fl_Pixmap(idata_display_boundary_edges);
  return image;
}

void UserInterface::cb_param_width_edges_i(Fl_Value_Input* o, void*) {
  scene->group_edges->drawstyle->setLineWidth((double)o->value());
scene->group_edges->touch();
viewer->redraw();
}
void UserInterface::cb_param_width_edges(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_param_width_edges_i(o,v);
}

void UserInterface::cb_2_i(Fl_Button*, void*) {
  scene->group_voronoi->changeDisplay();
//scene->group_debug->changeDisplay();
viewer->redraw();
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void UserInterface::cb_param_width_voronoi_i(Fl_Value_Input* o, void*) {
  scene->group_voronoi->drawstyle->setLineWidth((double)o->value());
scene->group_voronoi->touch();
viewer->redraw();
}
void UserInterface::cb_param_width_voronoi(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_param_width_voronoi_i(o,v);
}

void UserInterface::cb_button_weighted_i(Fl_Button*, void*) {
  scene->voronoi_weighted = 1 - scene->voronoi_weighted;
}
void UserInterface::cb_button_weighted(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_button_weighted_i(o,v);
}

void UserInterface::cb_label_simplices_i(Fl_Value_Input* o, void*) {
  scene->updateAlpha(0., min(o->value(), scene->N-1));
label_alpha->value(scene->alpha);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
slider_simplices->value(o->value()/scene->N);
label_betti->value(scene->betti.c_str());
viewer->redraw();
}
void UserInterface::cb_label_simplices(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_label_simplices_i(o,v);
}

void UserInterface::cb_Collapse_i(Fl_Button*, void*) {
  scene->collapseSB();
viewer->redraw();
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
slider_alpha->deactivate();
slider_simplices->deactivate();
label_simplices->deactivate();
label_betti->value(scene->betti.c_str());
}
void UserInterface::cb_Collapse(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Collapse_i(o,v);
}

void UserInterface::cb_Weighted_i(Fl_Value_Input* o, void*) {
  scene->param_factor_spheres = (double)o->value();
scene->group_radius_spheres->touch();
viewer->redraw();
}
void UserInterface::cb_Weighted(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Weighted_i(o,v);
}

void UserInterface::cb_param_threshold_lfs_i(Fl_Value_Input* o, void*) {
  scene->param_threshold_lfs = (double)o->value();
}
void UserInterface::cb_param_threshold_lfs(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_param_threshold_lfs_i(o,v);
}

void UserInterface::cb_param_k_neighbors_i(Fl_Value_Input* o, void*) {
  scene->param_k_neighbors = o->value();
}
void UserInterface::cb_param_k_neighbors(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_param_k_neighbors_i(o,v);
}

void UserInterface::cb_Alpha_i(Fl_Button*, void*) {
  scene->method = 0;
}
void UserInterface::cb_Alpha(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Alpha_i(o,v);
}

void UserInterface::cb_LFS_i(Fl_Button*, void*) {
  scene->method = 1;
}
void UserInterface::cb_LFS(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_LFS_i(o,v);
}

void UserInterface::cb_k_i(Fl_Button*, void*) {
  scene->method = 2;
}
void UserInterface::cb_k(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_k_i(o,v);
}

void UserInterface::cb_w_i(Fl_Button* o, void*) {
  scene->mode2_collapse = o->value();
}
void UserInterface::cb_w(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_w_i(o,v);
}

void UserInterface::cb_Betti_i(Fl_Check_Button* o, void*) {
  scene->display_betti = o->value();
}
void UserInterface::cb_Betti(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Betti_i(o,v);
}

void UserInterface::cb_Collapse1_i(Fl_Button*, void*) {
  scene->collapse();
viewer->redraw();
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
slider_alpha->deactivate();
slider_simplices->deactivate();
label_simplices->deactivate();
label_betti->value(scene->betti.c_str());
}
void UserInterface::cb_Collapse1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Collapse1_i(o,v);
}

void UserInterface::cb_Collapse2_i(Fl_Button*, void*) {
  scene->collapseToLowerConvexHull();
viewer->redraw();
label_simplices->value(scene->numberSimplices);
label_vertices->value(scene->numberVertices);
label_edges->value(scene->numberEdges);
label_triangles->value(scene->numberTriangles);
label_tetrahedra->value(scene->numberTetrahedra);
slider_alpha->deactivate();
slider_simplices->deactivate();
label_simplices->deactivate();
label_betti->value(scene->betti.c_str());
}
void UserInterface::cb_Collapse2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Collapse2_i(o,v);
}

void UserInterface::cb_Betti1_i(Fl_Check_Button* o, void*) {
  scene->betti_debug = o->value();
}
void UserInterface::cb_Betti1(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Betti1_i(o,v);
}

UserInterface::UserInterface() {
  { window = new Fl_Double_Window(476, 914, "Scene 3D");
    window->box(FL_UP_BOX);
    window->callback((Fl_Callback*)cb_window, (void*)(this));
    { menubar = new Fl_Menu_Bar(0, 0, 465, 25, "Menu Bar");
      menubar->menu(menu_menubar);
    } // Fl_Menu_Bar* menubar
    { home = new Fl_Button(29, 50, 25, 25);
      home->selection_color((Fl_Color)207);
      home->image( image_home() );
      home->callback((Fl_Callback*)cb_home);
    } // Fl_Button* home
    { display_axes = new Fl_Button(64, 51, 25, 25);
      display_axes->type(1);
      display_axes->selection_color((Fl_Color)3);
      display_axes->image( image_display_axis() );
      display_axes->callback((Fl_Callback*)cb_display_axes);
    } // Fl_Button* display_axes
    { display_vertices = new Fl_Button(31, 154, 25, 25);
      display_vertices->type(1);
      display_vertices->value(1);
      display_vertices->selection_color((Fl_Color)3);
      display_vertices->image( image_display_pointcloud() );
      display_vertices->callback((Fl_Callback*)cb_display_vertices);
    } // Fl_Button* display_vertices
    { display_vertices_embellished = new Fl_Button(31, 189, 25, 25, "S");
      display_vertices_embellished->type(1);
      display_vertices_embellished->selection_color((Fl_Color)3);
      display_vertices_embellished->callback((Fl_Callback*)cb_display_vertices_embellished);
    } // Fl_Button* display_vertices_embellished
    { zoom_plus = new Fl_Button(115, 47, 33, 33);
      zoom_plus->selection_color((Fl_Color)207);
      zoom_plus->image( image_zoom() );
      zoom_plus->callback((Fl_Callback*)cb_zoom_plus);
    } // Fl_Button* zoom_plus
    { zoom_moins = new Fl_Button(150, 47, 33, 33);
      zoom_moins->selection_color((Fl_Color)207);
      zoom_moins->image( image_zoom1() );
      zoom_moins->callback((Fl_Callback*)cb_zoom_moins);
    } // Fl_Button* zoom_moins
    { zoom_to_fit = new Fl_Button(185, 47, 33, 33);
      zoom_to_fit->selection_color((Fl_Color)207);
      zoom_to_fit->image( image_zoom_to_fit() );
      zoom_to_fit->callback((Fl_Callback*)cb_zoom_to_fit);
    } // Fl_Button* zoom_to_fit
    { Fl_Button* o = new Fl_Button(255, 47, 33, 33, "X+");
      o->selection_color((Fl_Color)207);
      o->callback((Fl_Callback*)cb_X);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(255, 87, 33, 33, "X-");
      o->selection_color((Fl_Color)207);
      o->callback((Fl_Callback*)cb_X1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(295, 47, 33, 33, "Y+");
      o->selection_color((Fl_Color)207);
      o->callback((Fl_Callback*)cb_Y);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(295, 87, 33, 33, "Y-");
      o->selection_color((Fl_Color)207);
      o->callback((Fl_Callback*)cb_Y1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(335, 47, 33, 33, "Z+");
      o->selection_color((Fl_Color)207);
      o->callback((Fl_Callback*)cb_Z);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(335, 87, 33, 33, "Z-");
      o->selection_color((Fl_Color)207);
      o->callback((Fl_Callback*)cb_Z1);
    } // Fl_Button* o
    { param_size_points_vertices = new Fl_Value_Input(76, 154, 66, 25, "Size of points");
      param_size_points_vertices->minimum(1);
      param_size_points_vertices->maximum(6);
      param_size_points_vertices->step(0.2);
      param_size_points_vertices->value(2);
      param_size_points_vertices->textsize(10);
      param_size_points_vertices->callback((Fl_Callback*)cb_param_size_points_vertices);
      param_size_points_vertices->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* param_size_points_vertices
    { display_selected_vertex = new Fl_Button(365, 855, 25, 25, "Click");
      display_selected_vertex->type(1);
      display_selected_vertex->value(1);
      display_selected_vertex->selection_color((Fl_Color)3);
      display_selected_vertex->callback((Fl_Callback*)cb_display_selected_vertex);
      display_selected_vertex->align(Fl_Align(296));
    } // Fl_Button* display_selected_vertex
    { param_size_spheres = new Fl_Value_Input(76, 189, 66, 25, "Size of spheres");
      param_size_spheres->minimum(0.0001);
      param_size_spheres->maximum(0.2);
      param_size_spheres->step(0.0001);
      param_size_spheres->value(0.01);
      param_size_spheres->textsize(10);
      param_size_spheres->callback((Fl_Callback*)cb_param_size_spheres);
      param_size_spheres->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* param_size_spheres
    { Fl_Box* o = new Fl_Box(20, 114, 86, 30, "Vertices");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(360, 815, 86, 30, "Selection");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(16, 331, 86, 30, "Triangles");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { display_triangles = new Fl_Button(30, 403, 25, 25);
      display_triangles->type(1);
      display_triangles->value(1);
      display_triangles->selection_color((Fl_Color)3);
      display_triangles->image( image_display_surface() );
      display_triangles->callback((Fl_Callback*)cb_display_triangles);
    } // Fl_Button* display_triangles
    { coef_transparency = new Fl_Value_Input(150, 368, 30, 25, "Transparency coefficient");
      coef_transparency->labelsize(12);
      coef_transparency->step(0.01);
      coef_transparency->value(0.2);
      coef_transparency->textsize(10);
      coef_transparency->callback((Fl_Callback*)cb_coef_transparency);
      coef_transparency->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* coef_transparency
    { transparent = new Fl_Button(30, 368, 90, 25, "Transparent");
      transparent->type(1);
      transparent->value(1);
      transparent->selection_color((Fl_Color)3);
      transparent->callback((Fl_Callback*)cb_transparent);
    } // Fl_Button* transparent
    { MATERIAL_FILLED_AND_OUTLINES = new Fl_Button(188, 403, 25, 25);
      MATERIAL_FILLED_AND_OUTLINES->type(102);
      MATERIAL_FILLED_AND_OUTLINES->selection_color((Fl_Color)3);
      MATERIAL_FILLED_AND_OUTLINES->image( image_ico0() );
      MATERIAL_FILLED_AND_OUTLINES->callback((Fl_Callback*)cb_MATERIAL_FILLED_AND_OUTLINES);
    } // Fl_Button* MATERIAL_FILLED_AND_OUTLINES
    { MATERIAL_OUTLINES = new Fl_Button(85, 403, 25, 25);
      MATERIAL_OUTLINES->type(102);
      MATERIAL_OUTLINES->selection_color((Fl_Color)3);
      MATERIAL_OUTLINES->image( image_ico1() );
      MATERIAL_OUTLINES->callback((Fl_Callback*)cb_MATERIAL_OUTLINES);
    } // Fl_Button* MATERIAL_OUTLINES
    { MATERIAL_FILLED = new Fl_Button(136, 403, 25, 25);
      MATERIAL_FILLED->type(102);
      MATERIAL_FILLED->value(1);
      MATERIAL_FILLED->selection_color((Fl_Color)3);
      MATERIAL_FILLED->image( image_ico2() );
      MATERIAL_FILLED->callback((Fl_Callback*)cb_MATERIAL_FILLED);
    } // Fl_Button* MATERIAL_FILLED
    { MATERIAL_FILLED_AND_LINES = new Fl_Button(162, 403, 25, 25);
      MATERIAL_FILLED_AND_LINES->type(102);
      MATERIAL_FILLED_AND_LINES->selection_color((Fl_Color)3);
      MATERIAL_FILLED_AND_LINES->image( image_ico3() );
      MATERIAL_FILLED_AND_LINES->callback((Fl_Callback*)cb_MATERIAL_FILLED_AND_LINES);
    } // Fl_Button* MATERIAL_FILLED_AND_LINES
    { MATERIAL_LINES = new Fl_Button(111, 403, 25, 25);
      MATERIAL_LINES->type(102);
      MATERIAL_LINES->selection_color((Fl_Color)3);
      MATERIAL_LINES->image( image_ico4() );
      MATERIAL_LINES->callback((Fl_Callback*)cb_MATERIAL_LINES);
    } // Fl_Button* MATERIAL_LINES
    { Fl_Box* o = new Fl_Box(20, 530, 86, 30, "Alpha complex");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { slider_alpha = new Fl_Slider(15, 564, 280, 25);
      slider_alpha->type(1);
      slider_alpha->value(1);
      slider_alpha->callback((Fl_Callback*)cb_slider_alpha);
    } // Fl_Slider* slider_alpha
    { slider_simplices = new Fl_Slider(15, 593, 280, 25);
      slider_simplices->type(1);
      slider_simplices->callback((Fl_Callback*)cb_slider_simplices);
    } // Fl_Slider* slider_simplices
    { Fl_Box* o = new Fl_Box(20, 452, 86, 30, "Tetrahedra");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(30, 484, 25, 25);
      o->type(1);
      o->value(1);
      o->selection_color((Fl_Color)3);
      o->image( image_display_convex_hull() );
      o->callback((Fl_Callback*)cb_);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(20, 229, 86, 30, "Edges");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(31, 263, 25, 25);
      o->type(1);
      o->value(1);
      o->selection_color((Fl_Color)3);
      o->image( image_display_boundary_edges() );
      o->callback((Fl_Callback*)cb_1);
    } // Fl_Button* o
    { label_vertices = new Fl_Value_Output(340, 635, 120, 25, "Vertices ");
    } // Fl_Value_Output* label_vertices
    { label_edges = new Fl_Value_Output(340, 670, 120, 25, "Edges ");
    } // Fl_Value_Output* label_edges
    { label_triangles = new Fl_Value_Output(340, 705, 120, 25, "Triangles ");
    } // Fl_Value_Output* label_triangles
    { label_tetrahedra = new Fl_Value_Output(340, 740, 120, 25, "Tetrahedra ");
    } // Fl_Value_Output* label_tetrahedra
    { label_alpha = new Fl_Value_Output(340, 564, 120, 25, "Alpha");
    } // Fl_Value_Output* label_alpha
    { param_width_edges = new Fl_Value_Input(75, 263, 66, 25, "Width of edges");
      param_width_edges->minimum(1);
      param_width_edges->maximum(10);
      param_width_edges->step(0.2);
      param_width_edges->value(1);
      param_width_edges->callback((Fl_Callback*)cb_param_width_edges);
      param_width_edges->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* param_width_edges
    { Fl_Button* o = new Fl_Button(31, 295, 25, 25);
      o->type(1);
      o->selection_color((Fl_Color)3);
      o->image( image_display_boundary_edges() );
      o->callback((Fl_Callback*)cb_2);
    } // Fl_Button* o
    { param_width_voronoi = new Fl_Value_Input(75, 295, 66, 25, "Width of Voronoi edges");
      param_width_voronoi->minimum(1);
      param_width_voronoi->maximum(10);
      param_width_voronoi->step(0.2);
      param_width_voronoi->value(1);
      param_width_voronoi->callback((Fl_Callback*)cb_param_width_voronoi);
      param_width_voronoi->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* param_width_voronoi
    { button_weighted = new Fl_Button(175, 532, 75, 25, "Weighted");
      button_weighted->type(1);
      button_weighted->selection_color((Fl_Color)3);
      button_weighted->callback((Fl_Callback*)cb_button_weighted);
    } // Fl_Button* button_weighted
    { label_simplices = new Fl_Value_Input(360, 593, 100, 25, "Simplices");
      label_simplices->callback((Fl_Callback*)cb_label_simplices);
      label_simplices->when(FL_WHEN_RELEASE);
    } // Fl_Value_Input* label_simplices
    { Fl_Button* o = new Fl_Button(257, 532, 97, 25, "Collapse (SB)");
      o->tooltip("Collapse with Skeleton Blocker");
      o->callback((Fl_Callback*)cb_Collapse);
    } // Fl_Button* o
    { Fl_Value_Input* o = new Fl_Value_Input(260, 189, 50, 25, "Weighted vertices factor");
      o->step(0.01);
      o->value(1);
      o->callback((Fl_Callback*)cb_Weighted);
      o->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* o
    { Fl_Box* o = new Fl_Box(19, 665, 86, 30, "Proximity flag");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { param_threshold_lfs = new Fl_Value_Input(14, 700, 40, 25, "Threshold for LFS prox. graph");
      param_threshold_lfs->maximum(2);
      param_threshold_lfs->step(0.01);
      param_threshold_lfs->value(1);
      param_threshold_lfs->callback((Fl_Callback*)cb_param_threshold_lfs);
      param_threshold_lfs->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* param_threshold_lfs
    { param_k_neighbors = new Fl_Value_Input(14, 730, 40, 25, "k for k-NN prox. graph");
      param_k_neighbors->minimum(1);
      param_k_neighbors->maximum(50);
      param_k_neighbors->step(1);
      param_k_neighbors->value(10);
      param_k_neighbors->callback((Fl_Callback*)cb_param_k_neighbors);
      param_k_neighbors->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Input* param_k_neighbors
    { Fl_Group* o = new Fl_Group(20, 790, 145, 105, "Method");
      o->labelfont(1);
      o->labelsize(18);
      o->labelcolor((Fl_Color)120);
      { Fl_Button* o = new Fl_Button(35, 800, 110, 25, "Alpha complex");
        o->type(102);
        o->value(1);
        o->selection_color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_Alpha);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(35, 830, 110, 25, "LFS prox. flag");
        o->type(102);
        o->selection_color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_LFS);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(35, 860, 110, 25, "k-NN prox. flag");
        o->type(102);
        o->selection_color((Fl_Color)3);
        o->callback((Fl_Callback*)cb_k);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(160, 860, 85, 25, "w/ collapses");
      o->type(1);
      o->selection_color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_w);
    } // Fl_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(15, 625, 20, 25, "Betti numbers :");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)cb_Betti);
    } // Fl_Check_Button* o
    { label_betti = new Fl_Output(135, 625, 110, 25);
    } // Fl_Output* label_betti
    { Fl_Button* o = new Fl_Button(361, 532, 98, 25, "Collapse (ST)");
      o->tooltip("Collapse with Simplex Tree");
      o->callback((Fl_Callback*)cb_Collapse1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(257, 500, 202, 25, "Collapse to lower convex hull");
      o->callback((Fl_Callback*)cb_Collapse2);
    } // Fl_Button* o
    { Fl_Check_Button* o = new Fl_Check_Button(15, 645, 25, 25, "Betti debug");
      o->down_box(FL_DOWN_BOX);
      o->value(1);
      o->callback((Fl_Callback*)cb_Betti1);
    } // Fl_Check_Button* o
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
  { window_viewer = new Fl_Double_Window(1000, 1000);
    window_viewer->user_data((void*)(this));
    { viewer = new GLViewer(0, 0, 1000, 1000, "Viewer manipulated with a trackball");
      viewer->box(FL_NO_BOX);
      viewer->color(FL_BACKGROUND_COLOR);
      viewer->selection_color(FL_BACKGROUND_COLOR);
      viewer->labeltype(FL_NORMAL_LABEL);
      viewer->labelfont(0);
      viewer->labelsize(14);
      viewer->labelcolor(FL_FOREGROUND_COLOR);
      viewer->align(Fl_Align(FL_ALIGN_CENTER));
      viewer->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(viewer);
      viewer->scene = scene;
    } // GLViewer* viewer
    window_viewer->end();
  } // Fl_Double_Window* window_viewer
}

void UserInterface::show() {
  window->show();
  window_viewer->show();
  viewer->show();
  viewer->redraw();
}
